/** Copyright 2013 Google Inc.
 *  Copyright 2014 Andreas Schildbach
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Authors: Jim Burton, Miron Cuperman, Andreas Schildbach, John L. Jegutanis
 */

/* Notes:
 * - Endianness: All byte arrays that represent numbers (such as hashes and private keys) are Big Endian
 * - To regenerate after editing, run: mvn generate-sources -DupdateProtobuf
 */

package com.coinomi.core.protos;

option java_package = "com.coinomi.core.protos";

option java_outer_classname = "Protos";

message PeerAddress {
    required bytes ip_address = 1;
    required uint32 port = 2;
    required uint64 services = 3;
}

message EncryptedData {
    required bytes initialisation_vector = 1; // The initialisation vector for the AES encryption (16 bytes)
    required bytes encrypted_private_key = 2; // The encrypted private key
}

/**
 * Data attached to a Key message that defines the data needed by the BIP32 deterministic key hierarchy algorithm.
 */
message DeterministicKey {
    // Random data that allows us to extend a key. Without this, we can't figure out the next key in the chain and
    // should just treat it as a regular ORIGINAL type key.
    required bytes chain_code = 1;

    // The path